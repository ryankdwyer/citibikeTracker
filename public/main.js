'use strict';

var app = angular.module('citi', ['ui.router']);

app.controller('AuthController', function ($scope, AuthFactory, MapFactory) {
    var home = document.getElementById('pac-input-home');
    var homeBox = new google.maps.places.Autocomplete(home);
    var location;

    homeBox.addListener('place_changed', function () {
        location = parseLocation(homeBox.getPlace());
    });

    function parseLocation(placesObj) {
        return [{ lat: placesObj.geometry.location.G }, { lng: placesObj.geometry.location.K }];
    }

    $scope.signUp = function (credentials) {
        if (location) {
            credentials.home = location;
            AuthFactory.register(credentials).then(function () {
                $scope.closeModal();
            });
        } else {
            alert("Please enter a valid address");
        }
    };

    $scope.signInWithGoogle = function () {
        AuthFactory.signInWithGoogle().then(function (user) {
            $scope.closeModal();
            MapFactory.userHome = user.home;
            MapFactory.setCenter(MapFactory.userHome);
            alert('Welcome ' + user.name + '!');
        });
    };

    $scope.loginSubmit = function (credentials) {
        console.log($scope.loginForm);
        AuthFactory.login(credentials).then(function (user) {
            $scope.closeModal();
            MapFactory.userHome = user.home;
            console.log('user home', MapFactory.userHome);
            MapFactory.setCenter(MapFactory.userHome);
            alert('Welcome ' + user.name + '!');
        });
    };

    $scope.logOut = function () {
        AuthFactory.logOut();
    };

    $scope.showLogin = function () {
        var modal = angular.element('#loginModal');
        modal.removeClass('hide');
        modal.addClass('show');
    };

    $scope.showSignup = function () {
        var modal = angular.element('#signupModal');
        modal.removeClass('hide');
        modal.addClass('show');
    };

    $scope.closeModal = function () {
        angular.element('#loginModal').addClass('hide');
        angular.element('#loginModal').removeClass('show');
        angular.element('#signupModal').addClass('hide');
        angular.element('#signupModal').removeClass('show');
    };
});

app.factory('AuthFactory', function ($http, $state) {
    function toData(response) {
        return response.data;
    }
    return {
        login: function login(credentials) {
            return $http.post('/api/login', credentials).then(toData);
        },
        register: function register(credentials) {
            return $http.post('api/register', credentials).then(toData);
        },
        logout: function logout() {
            return $http.post('api/logout').then(toData);
        },
        signInWithGoogle: function signInWithGoogle() {
            return $http.get('api/auth/google').then(function (response) {
                return response.data;
            });
        }
    };
});

app.directive('login', function () {
    return {
        restrict: 'E',
        templateUrl: '/app/auth/auth.html',
        controller: 'AuthController'
    };
});

app.controller('PanelController', function ($scope, MapFactory) {
    var origin = document.getElementById('pac-input-origin');
    var originBox = new google.maps.places.Autocomplete(origin);
    var destination = document.getElementById('pac-input-destination');
    var destinationBox = new google.maps.places.Autocomplete(destination);

    originBox.addListener('place_changed', function () {
        MapFactory.origin = originBox.getPlace();
    });

    destinationBox.addListener('place_changed', function () {
        MapFactory.destination = destinationBox.getPlace();
    });

    function newLatLngObj(locationObj) {
        var newLoc = new google.maps.LatLng(locationObj.geometry.location.lat(), locationObj.geometry.location.lng());
        return newLoc;
    }

    $scope.setBounds = function () {
        var bounds = new google.maps.LatLngBounds();
        origin = newLatLngObj(MapFactory.origin);
        destination = newLatLngObj(MapFactory.destination);
        bounds.extend(origin);
        bounds.extend(destination);
        MapFactory.map.fitBounds(bounds);
    };

    $scope.getTravelTime = function () {
        var service = new google.maps.DistanceMatrixService();
        var infowindow = new google.maps.InfoWindow();
        service.getDistanceMatrix({
            origins: [newLatLngObj(MapFactory.origin)],
            destinations: [newLatLngObj(MapFactory.destination)],
            travelMode: google.maps.TravelMode.BICYCLING
        }, function (response, status) {
            if (status === google.maps.DistanceMatrixStatus.OK) {
                infowindow.setContent(response.rows[0].elements[0].duration.text);
            }
        });
    };

    $scope.calcAndDisplayRoute = function () {
        var directionsService = new google.maps.DirectionsService();
        $scope.getTravelTime();
        directionsService.route({
            origin: newLatLngObj(MapFactory.origin),
            destination: newLatLngObj(MapFactory.destination),
            travelMode: google.maps.TravelMode.BICYCLING,
            provideRouteAlternatives: true
        }, function (response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
                for (var i = 0; i < response.routes.length; i++) {
                    var color = i === 0 ? 'DodgerBlue' : 'DarkGray';
                    var zIndex = i === 0 ? 1000 : null;
                    var directions = new google.maps.DirectionsRenderer({
                        map: MapFactory.map,
                        directions: response,
                        routeIndex: i,
                        polylineOptions: {
                            strokeColor: color,
                            zIndex: zIndex,
                            strokeWeight: 5
                        }
                    });
                    if (i === 0) directions.setPanel(document.getElementById('directionsPanel'));
                }
            } else {
                // window.alert('Directions request failed due to: ', status);
                console.log('failed', response.status);
            }
        });
    };
});

app.controller('MapController', function ($scope, MapFactory, stations, updates) {
    var map;
    $scope.initMap = function () {
        var home = {
            lat: 40.729546,
            lng: -73.98569
        };

        map = new google.maps.Map(angular.element('#map-canvas')[0], {
            center: home,
            zoom: 13
        });
        MapFactory.map = map;

        var bikeLayer = new google.maps.BicyclingLayer();
        bikeLayer.setMap(map);

        var bounds = new google.maps.LatLngBounds();

        var infowindow = new google.maps.InfoWindow();
        map.addListener('click', function () {
            infowindow.close();
        });

        stations.data.forEach(function (el) {
            var marker = $scope.drawLocation([el.latitude, el.longitude], {});
            MapFactory.markers.push(marker);
            marker.addListener('click', function () {
                infowindow.close();
                contentString = "<p>Station: " + el.label + "</p>" + "<p>Bikes: " + updates.data[el.stationId][0] + '</p>' + "<p>Docks: " + updates.data[el.stationId][1] + '</p>' + "<p>Active: " + el.status + '</p>' + "<p>Last Update: " + $scope.setDate(updates.data[el.stationId][2]) + '</p>';
                infowindow.setContent(contentString);
                infowindow.open(map, marker);
            });
        });
    };

    $scope.updater = function () {
        MapFactory.getUpdates().then(function (response) {
            updates = response;
            $scope.initMap();
        });
    };

    $scope.removeMarkers = function () {
        MapFactory.markers.forEach(function (el) {
            el.setMap(null);
        });
    };

    $scope.showMarkers = function () {
        MapFactory.markers.forEach(function (el) {
            el.setMap(MapFactory.map);
        });
    };

    $scope.setDate = function (unix) {
        var date = new Date(unix * 1000);
        var hours = date.getHours();
        var ampm = date.getHours() > 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        var minutes = date.getMinutes();
        minutes = minutes < 10 ? '0' + minutes : minutes;
        return 'Today @ ' + hours + ':' + minutes + ' ' + ampm;
    };

    $scope.drawLocation = function (location, opts) {
        if (typeof opts !== 'object') {
            opts = {};
        }
        opts.icon = '/images/bike.png';
        opts.position = new google.maps.LatLng(location[0], location[1]);
        opts.map = map;
        return new google.maps.Marker(opts);
    };

    $scope.setMapCenter = function (locationObj) {
        var center = new google.maps.LatLng(locationObj[0].lat, locationObj[1].lng);
        MapFactory.map.setCenter(center);
    };

    $scope.initMap();
});

app.factory('MapFactory', function ($http) {
    return {
        stations: [],
        updates: {},
        origin: null,
        destination: null,
        map: null,
        userHome: null,
        markers: [],
        getStations: function getStations() {
            return $http.get('/api/stations').then(function (response) {
                return response;
            });
        },
        getUpdates: function getUpdates() {
            return $http.get('/api/update').then(function (response) {
                return response;
            });
        },
        setCenter: function setCenter(locationObj) {
            var center = new google.maps.LatLng(locationObj[0].lat, locationObj[1].lng);
            this.map.setCenter(center);
        }
    };
});
app.config(function ($stateProvider, $urlRouterProvider) {
    $stateProvider.state('map', {
        url: '',
        templateUrl: "/app/map/map.html",
        controller: 'MapController',
        resolve: {
            stations: function stations(MapFactory) {
                return MapFactory.getStations();
            },
            updates: function updates(MapFactory) {
                return MapFactory.getUpdates();
            }
        }
    });
    $stateProvider.state('map.panel', {
        url: '/panel',
        templateUrl: '/app/panel/panel.html',
        controller: 'PanelController'
    });
    $urlRouterProvider.when('/api/auth/google', '/');
});

app.directive('footer', function () {
    return {
        restrict: "E",
        templateUrl: "/footer.html"
    };
});
app.controller('NavbarController', function ($scope, $http, AuthFactory) {
    $scope.showLogin = function () {
        var modal = angular.element('#loginModal');
        if (modal.hasClass('show')) {
            modal.removeClass('show');
            modal.addClass('hide');
        } else {
            modal.removeClass('hide');
            modal.addClass('show');
        }
    };

    $scope.logout = function () {
        AuthFactory.logout();
    };

    $scope.closeModal = function () {
        angular.element('#loginModal').addClass('hide');
        angular.element('#loginModal').removeClass('show');
    };
});
app.directive('navbar', function () {
    return {
        restrict: 'E',
        templateUrl: "/navbar.html",
        controller: 'NavbarController'
    };
});
app.directive('modal', function () {
    return {
        restrict: 'E',
        templateUrl: '/modal.html'
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFwcC9hdXRoL2F1dGguY29udHJvbGxlci5qcyIsImFwcC9hdXRoL2F1dGguZmFjdG9yeS5qcyIsImFwcC9hdXRoL2F1dGguanMiLCJhcHAvcGFuZWwvcGFuZWwuY29udHJvbGxlci5qcyIsImFwcC9tYXAvbWFwLmNvbnRyb2xsZXIuanMiLCJhcHAvbWFwL21hcC5mYWN0b3J5LmpzIiwiYXBwL21hcC9tYXAuc3RhdGUuanMiLCJjb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuanMiLCJjb21wb25lbnRzL25hdmJhci9uYXZiYXIuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvbmF2YmFyL25hdmJhci5qcyIsImNvbXBvbmVudHMvbW9kYWwvbW9kYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBLEdBQUEsR0FBQSxPQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUE7O0FDQUEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxnQkFBQSxFQUFBLFVBQUEsTUFBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUE7QUFDQSxRQUFBLElBQUEsR0FBQSxRQUFBLENBQUEsY0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQTtBQUNBLFFBQUEsT0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsWUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxRQUFBLENBQUE7O0FBRUEsV0FBQSxDQUFBLFdBQUEsQ0FBQSxlQUFBLEVBQUEsWUFBQTtBQUNBLGdCQUFBLEdBQUEsYUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLEVBQUEsQ0FBQSxDQUFBO0tBQ0EsQ0FBQSxDQUFBOztBQUVBLGFBQUEsYUFBQSxDQUFBLFNBQUEsRUFBQTtBQUNBLGVBQUEsQ0FDQSxFQUFBLEdBQUEsRUFBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLEdBQUEsRUFBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FDQSxDQUFBO0tBQ0E7O0FBRUEsVUFBQSxDQUFBLE1BQUEsR0FBQSxVQUFBLFdBQUEsRUFBQTtBQUNBLFlBQUEsUUFBQSxFQUFBO0FBQ0EsdUJBQUEsQ0FBQSxJQUFBLEdBQUEsUUFBQSxDQUFBO0FBQ0EsdUJBQUEsQ0FBQSxRQUFBLENBQUEsV0FBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFlBQUE7QUFDQSxzQkFBQSxDQUFBLFVBQUEsRUFBQSxDQUFBO2FBQ0EsQ0FBQSxDQUFBO1NBQ0EsTUFBQTtBQUNBLGlCQUFBLENBQUEsOEJBQUEsQ0FBQSxDQUFBO1NBQ0E7S0FDQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxnQkFBQSxHQUFBLFlBQUE7QUFDQSxtQkFBQSxDQUFBLGdCQUFBLEVBQUEsQ0FDQSxJQUFBLENBQUEsVUFBQSxJQUFBLEVBQUE7QUFDQSxrQkFBQSxDQUFBLFVBQUEsRUFBQSxDQUFBO0FBQ0Esc0JBQUEsQ0FBQSxRQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQTtBQUNBLHNCQUFBLENBQUEsU0FBQSxDQUFBLFVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtBQUNBLGlCQUFBLENBQUEsVUFBQSxHQUFBLElBQUEsQ0FBQSxJQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7U0FDQSxDQUFBLENBQUE7S0FDQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxXQUFBLEdBQUEsVUFBQSxXQUFBLEVBQUE7QUFDQSxlQUFBLENBQUEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTtBQUNBLG1CQUFBLENBQUEsS0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxVQUFBLElBQUEsRUFBQTtBQUNBLGtCQUFBLENBQUEsVUFBQSxFQUFBLENBQUE7QUFDQSxzQkFBQSxDQUFBLFFBQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBO0FBQ0EsbUJBQUEsQ0FBQSxHQUFBLENBQUEsV0FBQSxFQUFBLFVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtBQUNBLHNCQUFBLENBQUEsU0FBQSxDQUFBLFVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtBQUNBLGlCQUFBLENBQUEsVUFBQSxHQUFBLElBQUEsQ0FBQSxJQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7U0FDQSxDQUFBLENBQUE7S0FDQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxNQUFBLEdBQUEsWUFBQTtBQUNBLG1CQUFBLENBQUEsTUFBQSxFQUFBLENBQUE7S0FDQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxTQUFBLEdBQUEsWUFBQTtBQUNBLFlBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7QUFDQSxhQUFBLENBQUEsV0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0FBQ0EsYUFBQSxDQUFBLFFBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtLQUNBLENBQUE7O0FBRUEsVUFBQSxDQUFBLFVBQUEsR0FBQSxZQUFBO0FBQ0EsWUFBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsQ0FBQSxXQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxhQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0tBQ0EsQ0FBQTs7QUFFQSxVQUFBLENBQUEsVUFBQSxHQUFBLFlBQUE7QUFDQSxlQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLGVBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUEsV0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0FBQ0EsZUFBQSxDQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxlQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtLQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDeEVBLEdBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxFQUFBLFVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQTtBQUNBLGFBQUEsTUFBQSxDQUFBLFFBQUEsRUFBQTtBQUNBLGVBQUEsUUFBQSxDQUFBLElBQUEsQ0FBQTtLQUNBO0FBQ0EsV0FBQTtBQUNBLGFBQUEsRUFBQSxlQUFBLFdBQUEsRUFBQTtBQUNBLG1CQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsWUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtTQUNBO0FBQ0EsZ0JBQUEsRUFBQSxrQkFBQSxXQUFBLEVBQUE7QUFDQSxtQkFBQSxLQUFBLENBQUEsSUFBQSxDQUFBLGNBQUEsRUFBQSxXQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7U0FDQTtBQUNBLGNBQUEsRUFBQSxrQkFBQTtBQUNBLG1CQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsWUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO1NBQ0E7QUFDQSx3QkFBQSxFQUFBLDRCQUFBO0FBQ0EsbUJBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxpQkFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxFQUFBO0FBQ0EsdUJBQUEsUUFBQSxDQUFBLElBQUEsQ0FBQTthQUNBLENBQUEsQ0FBQTtTQUNBO0tBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUN4QkEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxPQUFBLEVBQUEsWUFBQTtBQUNBLFdBQUE7QUFDQSxnQkFBQSxFQUFBLEdBQUE7QUFDQSxtQkFBQSxFQUFBLHFCQUFBO0FBQ0Esa0JBQUEsRUFBQSxnQkFBQTtLQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDTkEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxpQkFBQSxFQUFBLFVBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQTtBQUNBLFFBQUEsTUFBQSxHQUFBLFFBQUEsQ0FBQSxjQUFBLENBQUEsa0JBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxTQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsQ0FBQSxZQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxRQUFBLFdBQUEsR0FBQSxRQUFBLENBQUEsY0FBQSxDQUFBLHVCQUFBLENBQUEsQ0FBQTtBQUNBLFFBQUEsY0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsWUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBOztBQUVBLGFBQUEsQ0FBQSxXQUFBLENBQUEsZUFBQSxFQUFBLFlBQUE7QUFDQSxrQkFBQSxDQUFBLE1BQUEsR0FBQSxTQUFBLENBQUEsUUFBQSxFQUFBLENBQUE7S0FDQSxDQUFBLENBQUE7O0FBRUEsa0JBQUEsQ0FBQSxXQUFBLENBQUEsZUFBQSxFQUFBLFlBQUE7QUFDQSxrQkFBQSxDQUFBLFdBQUEsR0FBQSxjQUFBLENBQUEsUUFBQSxFQUFBLENBQUE7S0FDQSxDQUFBLENBQUE7O0FBRUEsYUFBQSxZQUFBLENBQUEsV0FBQSxFQUFBO0FBQ0EsWUFBQSxNQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsQ0FDQSxXQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLEVBQUEsRUFDQSxXQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FDQSxDQUFBO0FBQ0EsZUFBQSxNQUFBLENBQUE7S0FDQTs7QUFFQSxVQUFBLENBQUEsU0FBQSxHQUFBLFlBQUE7QUFDQSxZQUFBLE1BQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsWUFBQSxFQUFBLENBQUE7QUFDQSxjQUFBLEdBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLG1CQUFBLEdBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQTtBQUNBLGNBQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxjQUFBLENBQUEsTUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBO0FBQ0Esa0JBQUEsQ0FBQSxHQUFBLENBQUEsU0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0tBQ0EsQ0FBQTs7QUFFQSxVQUFBLENBQUEsYUFBQSxHQUFBLFlBQUE7QUFDQSxZQUFBLE9BQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEscUJBQUEsRUFBQSxDQUFBO0FBQ0EsWUFBQSxVQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLFVBQUEsRUFBQSxDQUFBO0FBQ0EsZUFBQSxDQUFBLGlCQUFBLENBQUE7QUFDQSxtQkFBQSxFQUFBLENBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLHdCQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsVUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBO0FBQ0Esc0JBQUEsRUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLFVBQUEsQ0FBQSxTQUFBO1NBQ0EsRUFBQSxVQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUE7QUFDQSxnQkFBQSxNQUFBLEtBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxvQkFBQSxDQUFBLEVBQUEsRUFBQTtBQUNBLDBCQUFBLENBQUEsVUFBQSxDQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTthQUNBO1NBQ0EsQ0FBQSxDQUFBO0tBQ0EsQ0FBQTs7QUFFQSxVQUFBLENBQUEsbUJBQUEsR0FBQSxZQUFBO0FBQ0EsWUFBQSxpQkFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxpQkFBQSxFQUFBLENBQUE7QUFDQSxjQUFBLENBQUEsYUFBQSxFQUFBLENBQUE7QUFDQSx5QkFBQSxDQUFBLEtBQUEsQ0FBQTtBQUNBLGtCQUFBLEVBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUE7QUFDQSx1QkFBQSxFQUFBLFlBQUEsQ0FBQSxVQUFBLENBQUEsV0FBQSxDQUFBO0FBQ0Esc0JBQUEsRUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLFVBQUEsQ0FBQSxTQUFBO0FBQ0Esb0NBQUEsRUFBQSxJQUFBO1NBQ0EsRUFBQSxVQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUE7QUFDQSxnQkFBQSxNQUFBLEtBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxnQkFBQSxDQUFBLEVBQUEsRUFBQTtBQUNBLHFCQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSx3QkFBQSxLQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxZQUFBLEdBQUEsVUFBQSxDQUFBO0FBQ0Esd0JBQUEsTUFBQSxHQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsQ0FBQTtBQUNBLHdCQUFBLFVBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsa0JBQUEsQ0FBQTtBQUNBLDJCQUFBLEVBQUEsVUFBQSxDQUFBLEdBQUE7QUFDQSxrQ0FBQSxFQUFBLFFBQUE7QUFDQSxrQ0FBQSxFQUFBLENBQUE7QUFDQSx1Q0FBQSxFQUFBO0FBQ0EsdUNBQUEsRUFBQSxLQUFBO0FBQ0Esa0NBQUEsRUFBQSxNQUFBO0FBQ0Esd0NBQUEsRUFBQSxDQUFBO3lCQUNBO3FCQUNBLENBQUEsQ0FBQTtBQUNBLHdCQUFBLENBQUEsS0FBQSxDQUFBLEVBQUEsVUFBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLENBQUEsY0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQSxDQUFBO2lCQUNBO2FBQ0EsTUFBQTs7QUFFQSx1QkFBQSxDQUFBLEdBQUEsQ0FBQSxRQUFBLEVBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO2FBQ0E7U0FDQSxDQUFBLENBQUE7S0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQzVFQSxHQUFBLENBQUEsVUFBQSxDQUFBLGVBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQSxVQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQTtBQUNBLFFBQUEsR0FBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE9BQUEsR0FBQSxZQUFBO0FBQ0EsWUFBQSxJQUFBLEdBQUE7QUFDQSxlQUFBLEVBQUEsU0FBQTtBQUNBLGVBQUEsRUFBQSxDQUFBLFFBQUE7U0FDQSxDQUFBOztBQUVBLFdBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUE7QUFDQSxrQkFBQSxFQUFBLElBQUE7QUFDQSxnQkFBQSxFQUFBLEVBQUE7U0FDQSxDQUFBLENBQUE7QUFDQSxrQkFBQSxDQUFBLEdBQUEsR0FBQSxHQUFBLENBQUE7O0FBRUEsWUFBQSxTQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLGNBQUEsRUFBQSxDQUFBO0FBQ0EsaUJBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7O0FBRUEsWUFBQSxNQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLFlBQUEsRUFBQSxDQUFBOztBQUVBLFlBQUEsVUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLEVBQUEsQ0FBQTtBQUNBLFdBQUEsQ0FBQSxXQUFBLENBQUEsT0FBQSxFQUFBLFlBQUE7QUFDQSxzQkFBQSxDQUFBLEtBQUEsRUFBQSxDQUFBO1NBQ0EsQ0FBQSxDQUFBOztBQUVBLGdCQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLEVBQUEsRUFBQTtBQUNBLGdCQUFBLE1BQUEsR0FBQSxNQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsRUFBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLENBQUE7QUFDQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxrQkFBQSxDQUFBLFdBQUEsQ0FBQSxPQUFBLEVBQUEsWUFBQTtBQUNBLDBCQUFBLENBQUEsS0FBQSxFQUFBLENBQUE7QUFDQSw2QkFBQSxHQUFBLGNBQUEsR0FBQSxFQUFBLENBQUEsS0FBQSxHQUFBLE1BQUEsR0FDQSxZQUFBLEdBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBQSxHQUNBLFlBQUEsR0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxNQUFBLEdBQ0EsYUFBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxHQUNBLGtCQUFBLEdBQUEsTUFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQTtBQUNBLDBCQUFBLENBQUEsVUFBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBO0FBQ0EsMEJBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO2FBQ0EsQ0FBQSxDQUFBO1NBQ0EsQ0FBQSxDQUFBO0tBQ0EsQ0FBQTs7QUFFQSxVQUFBLENBQUEsT0FBQSxHQUFBLFlBQUE7QUFDQSxrQkFBQSxDQUFBLFVBQUEsRUFBQSxDQUNBLElBQUEsQ0FBQSxVQUFBLFFBQUEsRUFBQTtBQUNBLG1CQUFBLEdBQUEsUUFBQSxDQUFBO0FBQ0Esa0JBQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQTtTQUNBLENBQUEsQ0FBQTtLQUNBLENBQUE7O0FBRUEsVUFBQSxDQUFBLGFBQUEsR0FBQSxZQUFBO0FBQ0Esa0JBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsRUFBQSxFQUFBO0FBQ0EsY0FBQSxDQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtTQUNBLENBQUEsQ0FBQTtLQUNBLENBQUE7O0FBRUEsVUFBQSxDQUFBLFdBQUEsR0FBQSxZQUFBO0FBQ0Esa0JBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsRUFBQSxFQUFBO0FBQ0EsY0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7U0FDQSxDQUFBLENBQUE7S0FDQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxPQUFBLEdBQUEsVUFBQSxJQUFBLEVBQUE7QUFDQSxZQUFBLElBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxZQUFBLEtBQUEsR0FBQSxJQUFBLENBQUEsUUFBQSxFQUFBLENBQUE7QUFDQSxZQUFBLElBQUEsR0FBQSxJQUFBLENBQUEsUUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLENBQUE7QUFDQSxhQUFBLEdBQUEsS0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLGFBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLFlBQUEsT0FBQSxHQUFBLElBQUEsQ0FBQSxVQUFBLEVBQUEsQ0FBQTtBQUNBLGVBQUEsR0FBQSxPQUFBLEdBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxPQUFBLEdBQUEsT0FBQSxDQUFBO0FBQ0EsZUFBQSxVQUFBLEdBQUEsS0FBQSxHQUFBLEdBQUEsR0FBQSxPQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsQ0FBQTtLQUNBLENBQUE7O0FBRUEsVUFBQSxDQUFBLFlBQUEsR0FBQSxVQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUE7QUFDQSxZQUFBLE9BQUEsSUFBQSxLQUFBLFFBQUEsRUFBQTtBQUNBLGdCQUFBLEdBQUEsRUFBQSxDQUFBO1NBQ0E7QUFDQSxZQUFBLENBQUEsSUFBQSxHQUFBLGtCQUFBLENBQUE7QUFDQSxZQUFBLENBQUEsUUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsWUFBQSxDQUFBLEdBQUEsR0FBQSxHQUFBLENBQUE7QUFDQSxlQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7S0FDQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxZQUFBLEdBQUEsVUFBQSxXQUFBLEVBQUE7QUFDQSxZQUFBLE1BQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQ0Esa0JBQUEsQ0FBQSxHQUFBLENBQUEsU0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0tBQ0EsQ0FBQTs7QUFFQSxVQUFBLENBQUEsT0FBQSxFQUFBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDdkZBLEdBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxFQUFBLFVBQUEsS0FBQSxFQUFBO0FBQ0EsV0FBQTtBQUNBLGdCQUFBLEVBQUEsRUFBQTtBQUNBLGVBQUEsRUFBQSxFQUFBO0FBQ0EsY0FBQSxFQUFBLElBQUE7QUFDQSxtQkFBQSxFQUFBLElBQUE7QUFDQSxXQUFBLEVBQUEsSUFBQTtBQUNBLGdCQUFBLEVBQUEsSUFBQTtBQUNBLGVBQUEsRUFBQSxFQUFBO0FBQ0EsbUJBQUEsRUFBQSx1QkFBQTtBQUNBLG1CQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsZUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFVBQUEsUUFBQSxFQUFBO0FBQ0EsdUJBQUEsUUFBQSxDQUFBO2FBQ0EsQ0FBQSxDQUFBO1NBQ0E7QUFDQSxrQkFBQSxFQUFBLHNCQUFBO0FBQ0EsbUJBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxhQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsVUFBQSxRQUFBLEVBQUE7QUFDQSx1QkFBQSxRQUFBLENBQUE7YUFDQSxDQUFBLENBQUE7U0FDQTtBQUNBLGlCQUFBLEVBQUEsbUJBQUEsV0FBQSxFQUFBO0FBQ0EsZ0JBQUEsTUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxnQkFBQSxDQUFBLEdBQUEsQ0FBQSxTQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7U0FDQTtLQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUMxQkEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLGNBQUEsRUFBQSxrQkFBQSxFQUFBO0FBQ0Esa0JBQUEsQ0FDQSxLQUFBLENBQUEsS0FBQSxFQUFBO0FBQ0EsV0FBQSxFQUFBLEVBQUE7QUFDQSxtQkFBQSxFQUFBLG1CQUFBO0FBQ0Esa0JBQUEsRUFBQSxlQUFBO0FBQ0EsZUFBQSxFQUFBO0FBQ0Esb0JBQUEsRUFBQSxrQkFBQSxVQUFBLEVBQUE7QUFDQSx1QkFBQSxVQUFBLENBQUEsV0FBQSxFQUFBLENBQUE7YUFDQTtBQUNBLG1CQUFBLEVBQUEsaUJBQUEsVUFBQSxFQUFBO0FBQ0EsdUJBQUEsVUFBQSxDQUFBLFVBQUEsRUFBQSxDQUFBO2FBQ0E7U0FDQTtLQUNBLENBQUEsQ0FBQTtBQUNBLGtCQUFBLENBQ0EsS0FBQSxDQUFBLFdBQUEsRUFBQTtBQUNBLFdBQUEsRUFBQSxRQUFBO0FBQ0EsbUJBQUEsRUFBQSx1QkFBQTtBQUNBLGtCQUFBLEVBQUEsaUJBQUE7S0FDQSxDQUFBLENBQUE7QUFDQSxzQkFBQSxDQUFBLElBQUEsQ0FBQSxrQkFBQSxFQUFBLEdBQUEsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ3RCQSxHQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsRUFBQSxZQUFBO0FBQ0EsV0FBQTtBQUNBLGdCQUFBLEVBQUEsR0FBQTtBQUNBLG1CQUFBLEVBQUEsY0FBQTtLQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUNMQSxHQUFBLENBQUEsVUFBQSxDQUFBLGtCQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEdBQUEsWUFBQTtBQUNBLFlBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7QUFDQSxZQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQSxDQUFBLEVBQUE7QUFDQSxpQkFBQSxDQUFBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLGlCQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO1NBQ0EsTUFBQTtBQUNBLGlCQUFBLENBQUEsV0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0FBQ0EsaUJBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7U0FDQTtLQUNBLENBQUE7O0FBRUEsVUFBQSxDQUFBLE1BQUEsR0FBQSxZQUFBO0FBQ0EsbUJBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQTtLQUNBLENBQUE7O0FBRUEsVUFBQSxDQUFBLFVBQUEsR0FBQSxZQUFBO0FBQ0EsZUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxlQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtLQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUNwQkEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLEVBQUEsWUFBQTtBQUNBLFdBQUE7QUFDQSxnQkFBQSxFQUFBLEdBQUE7QUFDQSxtQkFBQSxFQUFBLGNBQUE7QUFDQSxrQkFBQSxFQUFBLGtCQUFBO0tBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQTtBQ05BLEdBQUEsQ0FBQSxTQUFBLENBQUEsT0FBQSxFQUFBLFlBQUE7QUFDQSxXQUFBO0FBQ0EsZ0JBQUEsRUFBQSxHQUFBO0FBQ0EsbUJBQUEsRUFBQSxhQUFBO0tBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdjaXRpJywgWyd1aS5yb3V0ZXInXSk7XG4iLCJhcHAuY29udHJvbGxlcignQXV0aENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCBBdXRoRmFjdG9yeSwgTWFwRmFjdG9yeSkge1xuICAgIHZhciBob21lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhYy1pbnB1dC1ob21lJyk7XG4gICAgdmFyIGhvbWVCb3ggPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShob21lKTtcbiAgICB2YXIgbG9jYXRpb247XG5cbiAgICBob21lQm94LmFkZExpc3RlbmVyKCdwbGFjZV9jaGFuZ2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2NhdGlvbiA9IHBhcnNlTG9jYXRpb24oaG9tZUJveC5nZXRQbGFjZSgpKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlTG9jYXRpb24ocGxhY2VzT2JqKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7bGF0OiBwbGFjZXNPYmouZ2VvbWV0cnkubG9jYXRpb24uR30sXG4gICAgICAgICAgICB7bG5nOiBwbGFjZXNPYmouZ2VvbWV0cnkubG9jYXRpb24uS31cbiAgICAgICAgICAgIF07XG4gICAgfVxuXG4gICAgJHNjb3BlLnNpZ25VcCA9IGZ1bmN0aW9uIChjcmVkZW50aWFscykge1xuICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzLmhvbWUgPSBsb2NhdGlvbjtcbiAgICAgICAgICAgIEF1dGhGYWN0b3J5LnJlZ2lzdGVyKGNyZWRlbnRpYWxzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGVydChcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGFkZHJlc3NcIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLnNpZ25JbldpdGhHb29nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEF1dGhGYWN0b3J5LnNpZ25JbldpdGhHb29nbGUoKVxuICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgICAgICRzY29wZS5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICBNYXBGYWN0b3J5LnVzZXJIb21lID0gdXNlci5ob21lO1xuICAgICAgICAgICAgTWFwRmFjdG9yeS5zZXRDZW50ZXIoTWFwRmFjdG9yeS51c2VySG9tZSk7XG4gICAgICAgICAgICBhbGVydCgnV2VsY29tZSAnICsgdXNlci5uYW1lICsgJyEnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5sb2dpblN1Ym1pdCA9IGZ1bmN0aW9uIChjcmVkZW50aWFscykge1xuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUubG9naW5Gb3JtKTtcbiAgICAgICAgQXV0aEZhY3RvcnkubG9naW4oY3JlZGVudGlhbHMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgICAgICAgJHNjb3BlLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgIE1hcEZhY3RvcnkudXNlckhvbWUgPSB1c2VyLmhvbWU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXNlciBob21lJywgTWFwRmFjdG9yeS51c2VySG9tZSk7XG4gICAgICAgICAgICBNYXBGYWN0b3J5LnNldENlbnRlcihNYXBGYWN0b3J5LnVzZXJIb21lKTtcbiAgICAgICAgICAgIGFsZXJ0KCdXZWxjb21lICcgKyB1c2VyLm5hbWUgKyAnIScpO1xuICAgICAgICB9KTsgXG4gICAgfTtcblxuICAgICRzY29wZS5sb2dPdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEF1dGhGYWN0b3J5LmxvZ091dCgpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2hvd0xvZ2luID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbW9kYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNsb2dpbk1vZGFsJyk7XG4gICAgICAgIG1vZGFsLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICAgICAgIG1vZGFsLmFkZENsYXNzKCdzaG93Jyk7XG4gICAgfTtcblxuICAgICRzY29wZS5zaG93U2lnbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbW9kYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNzaWdudXBNb2RhbCcpO1xuICAgICAgICBtb2RhbC5yZW1vdmVDbGFzcygnaGlkZScpO1xuICAgICAgICBtb2RhbC5hZGRDbGFzcygnc2hvdycpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuY2xvc2VNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbG9naW5Nb2RhbCcpLmFkZENsYXNzKCdoaWRlJyk7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xvZ2luTW9kYWwnKS5yZW1vdmVDbGFzcygnc2hvdycpO1xuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzaWdudXBNb2RhbCcpLmFkZENsYXNzKCdoaWRlJyk7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3NpZ251cE1vZGFsJykucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcbiAgICB9O1xufSk7XG4iLCJhcHAuZmFjdG9yeSgnQXV0aEZhY3RvcnknLCBmdW5jdGlvbiAoJGh0dHAsICRzdGF0ZSkge1xuICAgIGZ1bmN0aW9uIHRvRGF0YShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9naW46IGZ1bmN0aW9uIChjcmVkZW50aWFscykge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbG9naW4nLCBjcmVkZW50aWFscylcbiAgICAgICAgICAgICAgICAudGhlbih0b0RhdGEpO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlcjogZnVuY3Rpb24gKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnYXBpL3JlZ2lzdGVyJywgY3JlZGVudGlhbHMpXG4gICAgICAgICAgICAgICAgLnRoZW4odG9EYXRhKTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9nb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnYXBpL2xvZ291dCcpXG4gICAgICAgICAgICAgICAgLnRoZW4odG9EYXRhKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2lnbkluV2l0aEdvb2dsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnYXBpL2F1dGgvZ29vZ2xlJylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG4iLCJhcHAuZGlyZWN0aXZlKCdsb2dpbicsIGZ1bmN0aW9uKCl7XG5cdHJldHVybiB7XG5cdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHR0ZW1wbGF0ZVVybDogJy9hcHAvYXV0aC9hdXRoLmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdBdXRoQ29udHJvbGxlcidcblx0fTtcbn0pOyIsImFwcC5jb250cm9sbGVyKCdQYW5lbENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCBNYXBGYWN0b3J5KSB7XG4gICAgdmFyIG9yaWdpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWMtaW5wdXQtb3JpZ2luJyk7XG4gICAgdmFyIG9yaWdpbkJveCA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlKG9yaWdpbik7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhYy1pbnB1dC1kZXN0aW5hdGlvbicpO1xuICAgIHZhciBkZXN0aW5hdGlvbkJveCA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlKGRlc3RpbmF0aW9uKTtcblxuICAgIG9yaWdpbkJveC5hZGRMaXN0ZW5lcigncGxhY2VfY2hhbmdlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTWFwRmFjdG9yeS5vcmlnaW4gPSBvcmlnaW5Cb3guZ2V0UGxhY2UoKTtcbiAgICB9KTtcblxuICAgIGRlc3RpbmF0aW9uQm94LmFkZExpc3RlbmVyKCdwbGFjZV9jaGFuZ2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBNYXBGYWN0b3J5LmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb25Cb3guZ2V0UGxhY2UoKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG5ld0xhdExuZ09iaihsb2NhdGlvbk9iaikge1xuICAgICAgICB2YXIgbmV3TG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhcbiAgICAgICAgICAgIGxvY2F0aW9uT2JqLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpLFxuICAgICAgICAgICAgbG9jYXRpb25PYmouZ2VvbWV0cnkubG9jYXRpb24ubG5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIHJldHVybiBuZXdMb2M7XG4gICAgfVxuXG4gICAgJHNjb3BlLnNldEJvdW5kcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcbiAgICAgICAgb3JpZ2luID0gbmV3TGF0TG5nT2JqKE1hcEZhY3Rvcnkub3JpZ2luKTtcbiAgICAgICAgZGVzdGluYXRpb24gPSBuZXdMYXRMbmdPYmooTWFwRmFjdG9yeS5kZXN0aW5hdGlvbik7XG4gICAgICAgIGJvdW5kcy5leHRlbmQob3JpZ2luKTtcbiAgICAgICAgYm91bmRzLmV4dGVuZChkZXN0aW5hdGlvbik7XG4gICAgICAgIE1hcEZhY3RvcnkubWFwLmZpdEJvdW5kcyhib3VuZHMpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZ2V0VHJhdmVsVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSBuZXcgZ29vZ2xlLm1hcHMuRGlzdGFuY2VNYXRyaXhTZXJ2aWNlO1xuICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KCk7XG4gICAgICAgIHNlcnZpY2UuZ2V0RGlzdGFuY2VNYXRyaXgoe1xuICAgICAgICAgICAgb3JpZ2luczogW25ld0xhdExuZ09iaihNYXBGYWN0b3J5Lm9yaWdpbildLFxuICAgICAgICAgICAgZGVzdGluYXRpb25zOiBbbmV3TGF0TG5nT2JqKE1hcEZhY3RvcnkuZGVzdGluYXRpb24pXSxcbiAgICAgICAgICAgIHRyYXZlbE1vZGU6IGdvb2dsZS5tYXBzLlRyYXZlbE1vZGUuQklDWUNMSU5HLFxuICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gZ29vZ2xlLm1hcHMuRGlzdGFuY2VNYXRyaXhTdGF0dXMuT0spIHtcbiAgICAgICAgICAgICAgICBpbmZvd2luZG93LnNldENvbnRlbnQocmVzcG9uc2Uucm93c1swXS5lbGVtZW50c1swXS5kdXJhdGlvbi50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5jYWxjQW5kRGlzcGxheVJvdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uc1NlcnZpY2UgPSBuZXcgZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1NlcnZpY2U7XG4gICAgICAgICRzY29wZS5nZXRUcmF2ZWxUaW1lKCk7XG4gICAgICAgIGRpcmVjdGlvbnNTZXJ2aWNlLnJvdXRlKHtcbiAgICAgICAgICAgIG9yaWdpbjogbmV3TGF0TG5nT2JqKE1hcEZhY3Rvcnkub3JpZ2luKSxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBuZXdMYXRMbmdPYmooTWFwRmFjdG9yeS5kZXN0aW5hdGlvbiksXG4gICAgICAgICAgICB0cmF2ZWxNb2RlOiBnb29nbGUubWFwcy5UcmF2ZWxNb2RlLkJJQ1lDTElORyxcbiAgICAgICAgICAgIHByb3ZpZGVSb3V0ZUFsdGVybmF0aXZlczogdHJ1ZVxuICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1N0YXR1cy5PSykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2Uucm91dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IChpID09PSAwKSA/ICdEb2RnZXJCbHVlJyA6ICdEYXJrR3JheSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6SW5kZXggPSAoaSA9PT0gMCkgPyAxMDAwIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbnMgPSBuZXcgZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1JlbmRlcmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogTWFwRmFjdG9yeS5tYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25zOiByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2x5bGluZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogY29sb3IsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogekluZGV4LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBkaXJlY3Rpb25zLnNldFBhbmVsKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXJlY3Rpb25zUGFuZWwnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB3aW5kb3cuYWxlcnQoJ0RpcmVjdGlvbnMgcmVxdWVzdCBmYWlsZWQgZHVlIHRvOiAnLCBzdGF0dXMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQnLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufSk7XG4iLCJhcHAuY29udHJvbGxlcignTWFwQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsIE1hcEZhY3RvcnksIHN0YXRpb25zLCB1cGRhdGVzKSB7XG4gICAgdmFyIG1hcDtcbiAgICAkc2NvcGUuaW5pdE1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhvbWUgPSB7XG4gICAgICAgICAgICBsYXQ6IDQwLjcyOTU0NixcbiAgICAgICAgICAgIGxuZzogLTczLjk4NTY5XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGFuZ3VsYXIuZWxlbWVudCgnI21hcC1jYW52YXMnKVswXSwge1xuICAgICAgICAgICAgY2VudGVyOiBob21lLFxuICAgICAgICAgICAgem9vbTogMTNcbiAgICAgICAgfSk7XG4gICAgICAgIE1hcEZhY3RvcnkubWFwID0gbWFwO1xuXG4gICAgICAgIHZhciBiaWtlTGF5ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuQmljeWNsaW5nTGF5ZXIoKTtcbiAgICAgICAgYmlrZUxheWVyLnNldE1hcChtYXApO1xuXG4gICAgICAgIHZhciBib3VuZHMgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KCk7XG4gICAgICAgIG1hcC5hZGRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbmZvd2luZG93LmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgc3RhdGlvbnMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9ICRzY29wZS5kcmF3TG9jYXRpb24oW2VsLmxhdGl0dWRlLCBlbC5sb25naXR1ZGVdLCB7fSk7XG4gICAgICAgICAgICBNYXBGYWN0b3J5Lm1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbmZvd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgY29udGVudFN0cmluZyA9IFwiPHA+U3RhdGlvbjogXCIgKyBlbC5sYWJlbCArIFwiPC9wPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8cD5CaWtlczogXCIgKyB1cGRhdGVzLmRhdGFbZWwuc3RhdGlvbklkXVswXSArICc8L3A+JyArXG4gICAgICAgICAgICAgICAgICAgIFwiPHA+RG9ja3M6IFwiICsgdXBkYXRlcy5kYXRhW2VsLnN0YXRpb25JZF1bMV0gKyAnPC9wPicgK1xuICAgICAgICAgICAgICAgICAgICBcIjxwPkFjdGl2ZTogXCIgKyBlbC5zdGF0dXMgKyAnPC9wPicgK1xuICAgICAgICAgICAgICAgICAgICBcIjxwPkxhc3QgVXBkYXRlOiBcIiArICRzY29wZS5zZXREYXRlKHVwZGF0ZXMuZGF0YVtlbC5zdGF0aW9uSWRdWzJdKSArICc8L3A+JztcbiAgICAgICAgICAgICAgICBpbmZvd2luZG93LnNldENvbnRlbnQoY29udGVudFN0cmluZyk7XG4gICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE1hcEZhY3RvcnkuZ2V0VXBkYXRlcygpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmluaXRNYXAoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUucmVtb3ZlTWFya2VycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTWFwRmFjdG9yeS5tYXJrZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICBlbC5zZXRNYXAobnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2hvd01hcmtlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE1hcEZhY3RvcnkubWFya2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgZWwuc2V0TWFwKE1hcEZhY3RvcnkubWFwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5zZXREYXRlID0gZnVuY3Rpb24gKHVuaXgpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh1bml4ICogMTAwMCk7XG4gICAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIGFtcG0gPSAoZGF0ZS5nZXRIb3VycygpID4gMTIpID8gJ1BNJyA6ICdBTSc7XG4gICAgICAgIGhvdXJzID0gaG91cnMgJSAxMjtcbiAgICAgICAgaG91cnMgPSAoaG91cnMpID8gaG91cnMgOiAxMjtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgbWludXRlcyA9IChtaW51dGVzIDwgMTApID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXM7XG4gICAgICAgIHJldHVybiAnVG9kYXkgQCAnICsgaG91cnMgKyAnOicgKyBtaW51dGVzICsgJyAnICsgYW1wbTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmRyYXdMb2NhdGlvbiA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgb3B0cykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgb3B0cy5pY29uID0gJy9pbWFnZXMvYmlrZS5wbmcnO1xuICAgICAgICBvcHRzLnBvc2l0aW9uID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvblswXSwgbG9jYXRpb25bMV0pO1xuICAgICAgICBvcHRzLm1hcCA9IG1hcDtcbiAgICAgICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5NYXJrZXIob3B0cyk7XG4gICAgfTtcblxuICAgICRzY29wZS5zZXRNYXBDZW50ZXIgPSBmdW5jdGlvbiAobG9jYXRpb25PYmopIHtcbiAgICAgICAgdmFyIGNlbnRlciA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb25PYmpbMF0ubGF0LCBsb2NhdGlvbk9ialsxXS5sbmcpO1xuICAgICAgICBNYXBGYWN0b3J5Lm1hcC5zZXRDZW50ZXIoY2VudGVyKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmluaXRNYXAoKTtcbn0pO1xuIiwiYXBwLmZhY3RvcnkoJ01hcEZhY3RvcnknLCBmdW5jdGlvbigkaHR0cCl7XG5cdHJldHVybiB7XG5cdFx0c3RhdGlvbnM6IFtdLFxuXHRcdHVwZGF0ZXM6IHt9LFxuXHRcdG9yaWdpbjogbnVsbCxcblx0XHRkZXN0aW5hdGlvbjogbnVsbCxcblx0XHRtYXA6IG51bGwsXG5cdFx0dXNlckhvbWU6IG51bGwsXG5cdFx0bWFya2VyczogW10sXG5cdFx0Z2V0U3RhdGlvbnM6IGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3N0YXRpb25zJylcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRnZXRVcGRhdGVzOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91cGRhdGUnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHNldENlbnRlcjogZnVuY3Rpb24gKGxvY2F0aW9uT2JqKSB7XG5cdFx0ICAgIHZhciBjZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uT2JqWzBdLmxhdCwgbG9jYXRpb25PYmpbMV0ubG5nKTtcblx0XHQgICAgdGhpcy5tYXAuc2V0Q2VudGVyKGNlbnRlcik7XG5cdFx0fVxuXHR9O1xufSk7IiwiYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgIC5zdGF0ZSgnbWFwJywge1xuICAgICAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi9hcHAvbWFwL21hcC5odG1sXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTWFwQ29udHJvbGxlcicsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgc3RhdGlvbnM6IGZ1bmN0aW9uIChNYXBGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXBGYWN0b3J5LmdldFN0YXRpb25zKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVzOiBmdW5jdGlvbiAoTWFwRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWFwRmFjdG9yeS5nZXRVcGRhdGVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAuc3RhdGUoJ21hcC5wYW5lbCcsIHtcbiAgICAgICAgICAgIHVybDogJy9wYW5lbCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvcGFuZWwvcGFuZWwuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUGFuZWxDb250cm9sbGVyJ1xuICAgICAgICB9KTtcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbignL2FwaS9hdXRoL2dvb2dsZScsICcvJyk7XG59KTtcbiIsImFwcC5kaXJlY3RpdmUoJ2Zvb3RlcicsIGZ1bmN0aW9uKCl7XG5cdHJldHVybiB7XG5cdFx0cmVzdHJpY3Q6IFwiRVwiLFxuXHRcdHRlbXBsYXRlVXJsOiBcIi9mb290ZXIuaHRtbFwiXG5cdH07XG59KTsiLCJhcHAuY29udHJvbGxlcignTmF2YmFyQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsIEF1dGhGYWN0b3J5KXtcblx0JHNjb3BlLnNob3dMb2dpbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtb2RhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xvZ2luTW9kYWwnKTtcblx0XHRpZiAobW9kYWwuaGFzQ2xhc3MoJ3Nob3cnKSkge1xuXHRcdFx0bW9kYWwucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcblx0XHRcdG1vZGFsLmFkZENsYXNzKCdoaWRlJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1vZGFsLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG5cdFx0XHRtb2RhbC5hZGRDbGFzcygnc2hvdycpO1xuXHRcdH1cblx0fTtcblxuXHQkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdEF1dGhGYWN0b3J5LmxvZ291dCgpO1xuXHR9O1xuXG5cdCRzY29wZS5jbG9zZU1vZGFsID0gZnVuY3Rpb24oKXtcblx0XHRhbmd1bGFyLmVsZW1lbnQoJyNsb2dpbk1vZGFsJykuYWRkQ2xhc3MoJ2hpZGUnKTtcblx0XHRhbmd1bGFyLmVsZW1lbnQoJyNsb2dpbk1vZGFsJykucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcblx0fTtcbn0pOyIsImFwcC5kaXJlY3RpdmUoJ25hdmJhcicsIGZ1bmN0aW9uKCl7XG5cdHJldHVybiB7XG5cdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHR0ZW1wbGF0ZVVybDogXCIvbmF2YmFyLmh0bWxcIixcblx0XHRjb250cm9sbGVyOiAnTmF2YmFyQ29udHJvbGxlcidcblx0fTtcbn0pOyIsImFwcC5kaXJlY3RpdmUoJ21vZGFsJywgZnVuY3Rpb24oKXtcblx0cmV0dXJuIHtcblx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdHRlbXBsYXRlVXJsOiAnL21vZGFsLmh0bWwnXG5cdH07XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
